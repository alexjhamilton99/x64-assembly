     1                                  ; transpose4x4.asm
     2                                  extern printf
     3                                  
     4                                  section .dada
     5 00000000 34783420444F55424C-     	fmt0	db	"4x4 DOUBLE PRECISION FLOATING POINT MATRIX TRANSPOSE",10,0
     5 00000009 452050524543495349-
     5 00000012 4F4E20464C4F415449-
     5 0000001B 4E4720504F494E5420-
     5 00000024 4D4154524958205452-
     5 0000002D 414E53504F53450A00 
     6 00000036 0A5468697320697320-     	fmt1	db	10,"This is the matrix:",10,0
     6 0000003F 746865206D61747269-
     6 00000048 783A0A00           
     7 0000004C 0A5468697320697320-     	fmt2	db	10,"This is the transpose (unpack):",10,0
     7 00000055 746865207472616E73-
     7 0000005E 706F73652028756E70-
     7 00000067 61636B293A0A00     
     8 0000006E 0A5468697320697320-     	fmt3	db	10,"This is the transpose (shuffle):",10,0
     8 00000077 746865207472616E73-
     8 00000080 706F73652028736875-
     8 00000089 66666C65293A0A00   
     9                                  
    10 00000091 90<rep Fh>              	align	32
    11 000000A0 000000000000F03F00-     	matrix	dq	1.,	2.,	3.,	4.
    11 000000A9 000000000000400000-
    11 000000B2 000000000840000000-
    11 000000BB 0000001040         
    12 000000C0 000000000000144000-     		dq	5.,	6.,	7.,	8.
    12 000000C9 000000000018400000-
    12 000000D2 000000001C40000000-
    12 000000DB 0000002040         
    13 000000E0 000000000000224000-     		dq	9.,	10.,	11.,	12.
    13 000000E9 000000000024400000-
    13 000000F2 000000002640000000-
    13 000000FB 0000002840         
    14 00000100 0000000000002A4000-     		dq	13.,	14.,	15.,	16.
    14 00000109 00000000002C400000-
    14 00000112 000000002E40000000-
    14 0000011B 0000003040         
    15                                  
    16                                  section .bss
    17                                  	alignb		32
    18 00000000 <res 40h>               	transpose	resd	16
    19                                  
    20                                  section .text
    21                                  	global main
    22                                  main:
    23 00000000 55                      	push	rbp
    24 00000001 4889E5                  	mov	rbp, rsp
    25                                  
    26                                  	; print title
    27 00000004 48BF-                   	mov	rdi, fmt1
    27 00000006 [3600000000000000] 
    28 0000000E E8(00000000)            	call	printf
    29                                  
    30                                  	; print matrix
    31 00000013 48BF-                   	mov	rdi, fmt1
    31 00000015 [3600000000000000] 
    32 0000001D E8(00000000)            	call	printf
    33 00000022 48BE-                   	mov	rsi, matrix
    33 00000024 [A000000000000000] 
    34 0000002C E822010000              	call	printm4x4
    35                                  
    36                                  	; compute transpose unpack
    37 00000031 48BF-                   	mov	rdi, matrix
    37 00000033 [A000000000000000] 
    38 0000003B 48BE-                   	mov	rsi, transpose
    38 0000003D [0000000000000000] 
    39 00000045 E85D000000              	call	transpose_unpack_4x4
    40                                  
    41                                  	; print the result
    42 0000004A 48BF-                   	mov	rdi, fmt2
    42 0000004C [4C00000000000000] 
    43 00000054 4831C0                  	xor	rax, rax
    44 00000057 E8(00000000)            	call	printf
    45 0000005C 48BE-                   	mov	rsi, transpose
    45 0000005E [0000000000000000] 
    46 00000066 E8E8000000              	call	printm4x4
    47                                  
    48                                  	; compute transpose shuffle
    49 0000006B 48BF-                   	mov	rdi, matrix
    49 0000006D [A000000000000000] 
    50 00000075 48BE-                   	mov	rsi, transpose
    50 00000077 [0000000000000000] 
    51 0000007F E877000000              	call	transpose_shuffle_4x4
    52                                  
    53                                  	; print the result
    54 00000084 48BF-                   	mov	rdi, fmt3
    54 00000086 [6E00000000000000] 
    55 0000008E 4831C0                  	xor	rax, rax
    56 00000091 E8(00000000)            	call	printf
    57 00000096 48BE-                   	mov	rsi, transpose
    57 00000098 [0000000000000000] 
    58 000000A0 E8AE000000              	call	printm4x4
    59                                  
    60 000000A5 C9                      	leave
    61 000000A6 C3                      	ret
    62                                  
    63                                  ;-----------------------------------------------------------------------------------------------------------
    64                                  
    65                                  transpose_unpack_4x4:
    66 000000A7 55                      	push		rbp
    67 000000A8 4889E5                  	mov		rbp, rsp
    68                                  
    69                                  	; load matrix into registers
    70 000000AB C5FD2807                	vmovapd		ymm0, [rdi]		;	1	2	3	4
    71 000000AF C5FD284F20              	vmovapd		ymm1, [rdi + 32]	;	5	6	7	8
    72 000000B4 C5FD285740              	vmovapd		ymm2, [rdi + 64]	;	9	10	11	12
    73 000000B9 C5FD285F60              	vmovapd		ymm3, [rdi + 96]	;	13	14	15	16
    74                                  
    75                                  	; unpack
    76 000000BE C57D14E1                	vunpcklpd	ymm12, ymm0, ymm1	;	1	2	3	4	
    77 000000C2 C57D15E9                	vunpckhpd	ymm13, ymm0, ymm1	;	5	6	7	8
    78 000000C6 C56D14F3                	vunpcklpd	ymm14, ymm2, ymm3	;	9	10	11	12
    79 000000CA C56D15FB                	vunpckhpd	ymm15, ymm2, ymm3	;	13	14	15	16
    80                                  
    81                                  	; permutate
    82 000000CE C4C31D06C620            	vperm2f128	ymm0, ymm12, ymm14, 00100000b	;	1	5	9	13
    83 000000D4 C4C31506CF20            	vperm2f128	ymm1, ymm13, ymm15, 00100000b	;	2	6	10	14
    84 000000DA C4C31D06D631            	vperm2f128	ymm2, ymm12, ymm14, 00110001b	;	3	7	11	15
    85 000000E0 C4C31506DF31            	vperm2f128	ymm3, ymm13, ymm15, 00110001b	;	4	8	12	16
    86                                  
    87                                  	; write to memory
    88 000000E6 C5FD2906                	vmovapd		[rsi], ymm0
    89 000000EA C5FD294E20              	vmovapd		[rsi + 32], ymm1
    90 000000EF C5FD295640              	vmovapd		[rsi + 64], ymm2
    91 000000F4 C5FD295E60              	vmovapd		[rsi + 96], ymm3
    92                                  
    93 000000F9 C9                      	leave
    94 000000FA C3                      	ret
    95                                  
    96                                  ;----------------------------------------------------------------------------------------------------------
    97                                  
    98                                  transpose_shuffle_4x4:
    99 000000FB 55                      	push		rbp
   100 000000FC 4889E5                  	mov		rbp, rsp
   101                                  
   102                                  	; load matrix into registers
   103 000000FF C5FD2807                	vmovapd		ymm0, [rdi]		;	1	2	3	4	
   104 00000103 C5FD284F20              	vmovapd		ymm1, [rdi + 32]	;	5	6	7	8
   105 00000108 C5FD285740              	vmovapd		ymm2, [rdi + 64]	;	9	10	11	12
   106 0000010D C5FD285F60              	vmovapd		ymm3, [rdi + 96]	;	13	14	15	16
   107                                  
   108                                  	; shuffle
   109 00000112 C57DC6E100              	vshufpd		ymm12, ymm0, ymm1, 0000b	;	1	5	3	7
   110 00000117 C57DC6E90F              	vshufpd		ymm13, ymm0, ymm1, 1111b	;	2	6	4	8
   111 0000011C C56DC6F300              	vshufpd		ymm14, ymm2, ymm3, 0000b	;	9	13	11	15
   112 00000121 C56DC6FB0F              	vshufpd		ymm15, ymm2, ymm3, 1111b	;	10	14	12	16
   113                                  
   114                                  	; permutate
   115 00000126 C4C31D06C620            	vperm2f128	ymm0, ymm12, ymm14, 00100000b	;	1	5	9	13
   116 0000012C C4C31506CF20            	vperm2f128	ymm1, ymm13, ymm15, 00100000b	;	2	6	10	14
   117 00000132 C4C31D06D631            	vperm2f128	ymm2, ymm12, ymm14, 00110001b	;	3	7	11	15
   118 00000138 C4C31506DF31            	vperm2f128	ymm3, ymm13, ymm15, 00110001b	;	4	8	12	16
   119                                  
   120                                  	; write to memory
   121 0000013E C5FD2906                	vmovapd		[rsi], ymm0
   122 00000142 C5FD294E20              	vmovapd		[rsi + 32], ymm1
   123 00000147 C5FD295640              	vmovapd		[rsi + 64], ymm2
   124 0000014C C5FD295E60              	vmovapd		[rsi + 96], ymm3
   125                                  
   126 00000151 C9                      	leave
   127 00000152 C3                      	ret
   128                                  
   129                                  ;------------------------------------------------------------------------------------------------------------
   130                                  
   131                                  printm4x4:
   132                                  section .data
   133 00000000 252E6609252E660925-     	.fmt	db	"%.f",9,"%.f",9,"%.f",9,"%.f",10,0
   133 00000009 2E6609252E660A00   
   134                                  section .text
   135 00000153 55                      	push	rbp
   136 00000154 4889E5                  	mov	rbp, rsp
   137                                  
   138 00000157 53                      	push	rbx		; callee saved
   139 00000158 4157                    	push	r15		; callee saved
   140                                  
   141 0000015A 48BF-                   	mov	rdi, .fmt
   141 0000015C [0000000000000000] 
   142 00000164 B904000000              	mov	rcx, 4
   143 00000169 4831DB                  	xor	rbx, rbx	; row counter
   144                                  
   145                                  	.loop:
   146 0000016C F20F10041E              		movsd	xmm0, [rsi + rbx]
   147 00000171 F20F104C1E08            		movsd	xmm1, [rsi + rbx + 8]
   148 00000177 F20F10541E10            		movsd	xmm2, [rsi + rbx + 16]
   149 0000017D F20F105C1E18            		movsd	xmm3, [rsi + rbx + 24]
   150                                  
   151 00000183 B804000000              		mov	rax, 4		; 4 floats
   152 00000188 51                      		push	rcx		; caller saved
   153 00000189 56                      		push	rsi		; caller saved
   154 0000018A 57                      		push	rdi		; caller saved
   155                                  
   156                                  		; align stack if needed
   157 0000018B 4D31FF                  		xor	r15, r15
   158 0000018E 48F7C40F000000          		test	rsp, 0fh	; last byte is 8 (not aligned)?
   159 00000195 410F95C7                		setnz	r15b		; set if not aligned
   160 00000199 49C1E703                		shl	r15, 3		; multiply by 8
   161 0000019D 4C29FC                  		sub	rsp, r15	; subtract 0 or 8
   162 000001A0 E8(00000000)            		call	printf
   163 000001A5 4C01FC                  		add	rsp, r15	; add 0 or 8
   164 000001A8 5F                      		pop	rdi
   165 000001A9 5E                      		pop	rsi
   166 000001AA 59                      		pop	rcx
   167 000001AB 4883C320                		add	rbx, 32		; next row
   168 000001AF E2BB                    		loop	.loop
   169                                  
   170 000001B1 415F                    	pop	r15
   171 000001B3 5B                      	pop	rbx
   172                                  
   173 000001B4 C9                      	leave
   174 000001B5 C3                      	ret
