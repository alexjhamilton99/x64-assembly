     1                                  ; matrix4x4.asm
     2                                  extern printf
     3                                  
     4                                  section .data
     5 00000000 0A34783420444F5542-     	fmt0	db	10,"4x4 DOUBLE PRECISION FLOATING POINT MATRICES",10,0
     5 00000009 4C4520505245434953-
     5 00000012 494F4E20464C4F4154-
     5 0000001B 494E4720504F494E54-
     5 00000024 204D41545249434553-
     5 0000002D 0A00               
     6 0000002F 0A5468697320697320-     	fmt1	db	10,"This is matrixA:",10,0
     6 00000038 6D6174726978413A0A-
     6 00000041 00                 
     7 00000042 0A5468697320697320-     	fmt2	db	10,"This is matrixB:",10,0
     7 0000004B 6D6174726978423A0A-
     7 00000054 00                 
     8 00000055 0A5468697320697320-     	fmt3	db	10,"This is matrixA x matrixB:",10,0
     8 0000005E 6D6174726978412078-
     8 00000067 206D6174726978423A-
     8 00000070 0A00               
     9 00000072 0A5468697320697320-     	fmt4	db	10,"This is matrixC:",10,0
     9 0000007B 6D6174726978433A0A-
     9 00000084 00                 
    10 00000085 0A5468697320697320-     	fmt5	db	10,"This is the inverse of matrixC:",10,0
    10 0000008E 74686520696E766572-
    10 00000097 7365206F66206D6174-
    10 000000A0 726978433A0A00     
    11 000000A7 0A50726F6F663A206D-     	fmt6	db	10,"Proof: matrixC x inverse =",10,0
    11 000000B0 617472697843207820-
    11 000000B9 696E7665727365203D-
    11 000000C2 0A00               
    12 000000C4 0A5468697320697320-     	fmt7	db	10,"This is matrixS:",10,0
    12 000000CD 6D6174726978533A0A-
    12 000000D6 00                 
    13 000000D7 0A5468697320697320-     	fmt8	db	10,"This is the inverse of matrixS:",10,0
    13 000000E0 74686520696E766572-
    13 000000E9 7365206F66206D6174-
    13 000000F2 726978533A0A00     
    14 000000F9 0A50726F6F663A206D-     	fmt9	db	10,"Proof: matrixS x inverse=",10,0
    14 00000102 617472697853207820-
    14 0000010B 696E76657273653D0A-
    14 00000114 00                 
    15 00000115 0A546865206D617472-     	fmt10	db	10,"The matrix is singular!",10,10,0
    15 0000011E 69782069732073696E-
    15 00000127 67756C6172210A0A00 
    16                                  
    17 00000130 90<rep 10h>             	align 32
    18 00000140 000000000000F03F00-     	matrixA		dq 	1.,	3.,	5.,	7.
    18 00000149 000000000008400000-
    18 00000152 000000001440000000-
    18 0000015B 0000001C40         
    19 00000160 000000000000224000-     			dq	9.,	11.,	13.,	15.
    19 00000169 000000000026400000-
    19 00000172 000000002A40000000-
    19 0000017B 0000002E40         
    20 00000180 000000000000314000-     			dq	17.,	19.,	21.,	23.
    20 00000189 000000000033400000-
    20 00000192 000000003540000000-
    20 0000019B 0000003740         
    21 000001A0 000000000000394000-     			dq	25.,	27.,	29.,	31.
    21 000001A9 00000000003B400000-
    21 000001B2 000000003D40000000-
    21 000001BB 0000003F40         
    22                                  
    23 000001C0 000000000000004000-     	matrixB		dq	2.,	4.,	6.,	8.
    23 000001C9 000000000010400000-
    23 000001D2 000000001840000000-
    23 000001DB 0000002040         
    24 000001E0 000000000000244000-     			dq	10.,	12.,	14.,	16.
    24 000001E9 000000000028400000-
    24 000001F2 000000002C40000000-
    24 000001FB 0000003040         
    25 00000200 000000000000324000-     			dq	18.,	20.,	22.,	24.
    25 00000209 000000000034400000-
    25 00000212 000000003640000000-
    25 0000021B 0000003840         
    26 00000220 0000000000003A4000-     			dq	26.,	28.,	30.,	32.
    26 00000229 00000000003C400000-
    26 00000232 000000003E40000000-
    26 0000023B 0000004040         
    27                                  
    28 00000240 000000000000004000-     	matrixC		dq	2.,	11.,	21.,	37.
    28 00000249 000000000026400000-
    28 00000252 000000003540000000-
    28 0000025B 0000804240         
    29 00000260 000000000000084000-     			dq	3.,	13.,	23.,	41.
    29 00000269 00000000002A400000-
    29 00000272 000000003740000000-
    29 0000027B 0000804440         
    30 00000280 000000000000144000-     			dq	5.,	17.,	29.,	43.
    30 00000289 000000000031400000-
    30 00000292 000000003D40000000-
    30 0000029B 0000804540         
    31 000002A0 0000000000001C4000-     			dq	7.,	19.,	31.,	47.
    31 000002A9 000000000033400000-
    31 000002B2 000000003F40000000-
    31 000002BB 0000804740         
    32                                  
    33 000002C0 000000000000F03F00-     	matrixS		dq	1.,	2.,	3.,	4.
    33 000002C9 000000000000400000-
    33 000002D2 000000000840000000-
    33 000002DB 0000001040         
    34 000002E0 000000000000144000-     			dq	5.,	6.,	7.,	8.
    34 000002E9 000000000018400000-
    34 000002F2 000000001C40000000-
    34 000002FB 0000002040         
    35 00000300 000000000000224000-     			dq	9.,	10.,	11.,	12.
    35 00000309 000000000024400000-
    35 00000312 000000002640000000-
    35 0000031B 0000002840         
    36 00000320 0000000000002A4000-     			dq	13.,	14.,	15.,	16.
    36 00000329 00000000002C400000-
    36 00000332 000000002E40000000-
    36 0000033B 0000003040         
    37                                  
    38                                  section .bss
    39                                  	align 32
    40 00000000 <res 80h>               	product		resq	16
    41 00000080 <res 80h>               	inverse		resq	16
    42                                  
    43                                  section .text
    44                                  	global main
    45                                  main:
    46 00000000 55                      	push	rbp
    47 00000001 4889E5                  	mov	rbp, rsp
    48                                  
    49                                  	; print title
    50 00000004 48BF-                   	mov	rdi, fmt0
    50 00000006 [0000000000000000] 
    51 0000000E E8(00000000)            	call	printf
    52                                  	; print matrixA
    53 00000013 48BF-                   	mov	rdi, fmt1
    53 00000015 [2F00000000000000] 
    54 0000001D E8(00000000)            	call	printf
    55 00000022 48BE-                   	mov	rsi, matrixA
    55 00000024 [4001000000000000] 
    56 0000002C E8DE030000              	call	printm4x4
    57                                  	; print matrixB
    58 00000031 48BF-                   	mov	rdi, fmt2
    58 00000033 [4200000000000000] 
    59 0000003B E8(00000000)            	call	printf
    60 00000040 48BE-                   	mov	rsi, matrixB
    60 00000042 [C001000000000000] 
    61 0000004A E8C0030000              	call	printm4x4
    62                                  	; product of matrixA x matrixB
    63 0000004F 48BF-                   	mov	rdi, matrixA
    63 00000051 [4001000000000000] 
    64 00000059 48BE-                   	mov	rsi, matrixB
    64 0000005B [C001000000000000] 
    65 00000063 48BA-                   	mov	rdx, product
    65 00000065 [0000000000000000] 
    66 0000006D E800040000              	call	multi4x4
    67                                  	; print the product
    68 00000072 48BF-                   	mov	rdi, fmt3
    68 00000074 [5500000000000000] 
    69 0000007C E8(00000000)            	call	printf
    70 00000081 48BE-                   	mov	rsi, product
    70 00000083 [0000000000000000] 
    71 0000008B E87F030000              	call	printm4x4
    72                                  	; print matrixC
    73 00000090 48BF-                   	mov	rdi, fmt4
    73 00000092 [7200000000000000] 
    74 0000009A E8(00000000)            	call	printf
    75 0000009F 48BE-                   	mov	rsi, matrixC
    75 000000A1 [4002000000000000] 
    76 000000A9 E861030000              	call	printm4x4
    77                                  	; matrixC's inverse
    78 000000AE 48BF-                   	mov	rdi, matrixC
    78 000000B0 [4002000000000000] 
    79 000000B8 48BE-                   	mov	rsi, inverse
    79 000000BA [8000000000000000] 
    80 000000C2 E818010000              	call	inverse4x4
    81 000000C7 4883F801                	cmp	rax, 1
    82 000000CB 0F84FD000000            	je	singular
    83                                  	; print inverse
    84 000000D1 48BF-                   	mov	rdi, fmt5
    84 000000D3 [8500000000000000] 
    85 000000DB E8(00000000)            	call	printf
    86 000000E0 48BE-                   	mov	rsi, inverse
    86 000000E2 [8000000000000000] 
    87 000000EA E820030000              	call	printm4x4
    88                                  	; proof multiply matrixC and inverse
    89 000000EF 48BE-                   	mov	rsi, matrixC
    89 000000F1 [4002000000000000] 
    90 000000F9 48BF-                   	mov	rdi, inverse
    90 000000FB [8000000000000000] 
    91 00000103 48BA-                   	mov	rdx, product
    91 00000105 [0000000000000000] 
    92 0000010D E860030000              	call	multi4x4
    93                                  	; print proof
    94 00000112 48BF-                   	mov	rdi, fmt6
    94 00000114 [A700000000000000] 
    95 0000011C E8(00000000)            	call	printf
    96 00000121 48BE-                   	mov	rsi, product
    96 00000123 [0000000000000000] 
    97 0000012B E8DF020000              	call	printm4x4
    98                                  
    99                                  	; SINGULAR MATRIX
   100                                  	; print matrixS
   101 00000130 48BF-                   	mov	rdi, fmt7
   101 00000132 [C400000000000000] 
   102 0000013A E8(00000000)            	call	printf
   103 0000013F 48BE-                   	mov	rsi, matrixS
   103 00000141 [C002000000000000] 
   104 00000149 E8C1020000              	call	printm4x4
   105                                  	; matrixS's inverse
   106 0000014E 48BF-                   	mov	rdi, matrixS
   106 00000150 [C002000000000000] 
   107 00000158 48BE-                   	mov	rsi, inverse
   107 0000015A [8000000000000000] 
   108 00000162 E878000000              	call	inverse4x4
   109 00000167 4883F801                	cmp	rax, 1
   110 0000016B 7461                    	je	singular
   111                                  	; print inverse
   112 0000016D 48BF-                   	mov	rdi, fmt8
   112 0000016F [D700000000000000] 
   113 00000177 E8(00000000)            	call	printf
   114 0000017C 48BE-                   	mov	rsi, inverse
   114 0000017E [8000000000000000] 
   115 00000186 E884020000              	call	printm4x4
   116                                  	; proof multiply matrixS and inverse
   117 0000018B 48BE-                   	mov	rsi, matrixS
   117 0000018D [C002000000000000] 
   118 00000195 48BF-                   	mov	rdi, inverse
   118 00000197 [8000000000000000] 
   119 0000019F 48BA-                   	mov	rdx, product
   119 000001A1 [0000000000000000] 
   120 000001A9 E8C4020000              	call	multi4x4
   121                                  	; print proof
   122 000001AE 48BF-                   	mov	rdi, fmt9
   122 000001B0 [F900000000000000] 
   123 000001B8 E8(00000000)            	call	printf
   124 000001BD 48BE-                   	mov	rsi, product
   124 000001BF [0000000000000000] 
   125 000001C7 E843020000              	call	printm4x4
   126 000001CC EB0F                    	jmp	exit
   127                                  
   128                                  	singular:
   129                                  		; print error
   130 000001CE 48BF-                   		mov	rdi, fmt10
   130 000001D0 [1501000000000000] 
   131 000001D8 E8(00000000)            		call	printf
   132                                  
   133                                  	exit:
   134 000001DD C9                      		leave
   135 000001DE C3                      		ret
   136                                  
   137                                  inverse4x4:
   138                                  section .data
   139                                  	align	32
   140 00000340 000000000000F03F00-     	.identity	dq	1.,	0.,	0.,	0.
   140 00000349 000000000000000000-
   140 00000352 000000000000000000-
   140 0000035B 0000000000         
   141 00000360 000000000000000000-     			dq	0.,	1.,	0.,	0.
   141 00000369 0000000000F03F0000-
   141 00000372 000000000000000000-
   141 0000037B 0000000000         
   142 00000380 000000000000000000-     			dq	0.,	0.,	1.,	0.
   142 00000389 000000000000000000-
   142 00000392 00000000F03F000000-
   142 0000039B 0000000000         
   143 000003A0 000000000000000000-     			dq	0.,	0.,	0.,	1.
   143 000003A9 000000000000000000-
   143 000003B2 000000000000000000-
   143 000003BB 000000F03F         
   144                                  
   145 000003C0 0000000000000080        	.minus_mask	dq	8000000000000000h
   146 000003C8 0400000000000000        	.size		dq	4			; 4 x 4 matrices
   147 000003D0 000000000000F03F        	.one		dq	1.0
   148 000003D8 0000000000000040        	.two		dq	2.0
   149 000003E0 0000000000000840        	.three		dq	3.0
   150 000003E8 0000000000001040        	.four		dq	4.0
   151                                  
   152                                  section .bss
   153                                  	alignb		32
   154 00000100 <res 80h>               	.matrix1	resq	16	; intermediate matrix
   155 00000180 <res 80h>               	.matrix2	resq	16	; intermediate matrix
   156 00000200 <res 80h>               	.matrix3	resq	16	; intermediate matrix
   157 00000280 <res 80h>               	.matrix4	resq	16	; intermediate matrix
   158 00000300 <res 80h>               	.matrixI	resq	16
   159                                  
   160 00000380 ????????                	.mxcsr		resd	1	; checks for zero division
   161                                  
   162                                  section .text
   163 000001DF 55                      	push	rbp
   164 000001E0 4889E5                  	mov	rbp, rsp
   165                                  
   166 000001E3 56                      	push		rsi		; save inverse matrix's address
   167 000001E4 C5FC77                  	vzeroall			; clear all ymm registers
   168                                  
   169                                  	; compute intermediate matrices
   170                                  	; compute intermediate matrix2
   171                                  	; rdi contains original matrix's address
   172 000001E7 4889FE                  	mov	rsi, rdi
   173 000001EA 48BA-                   	mov	rdx, .matrix2
   173 000001EC [8001000000000000] 
   174 000001F4 57                      	push	rdi
   175 000001F5 E878020000              	call	multi4x4
   176 000001FA 5F                      	pop	rdi
   177                                  
   178                                  	; compute intermediate matrix3
   179 000001FB 48BE-                   	mov	rsi, .matrix2
   179 000001FD [8001000000000000] 
   180 00000205 48BA-                   	mov	rdx, .matrix3
   180 00000207 [0002000000000000] 
   181 0000020F 57                      	push	rdi
   182 00000210 E85D020000              	call	multi4x4
   183 00000215 5F                      	pop	rdi
   184                                  
   185                                  	; compute intermediate matrix4
   186 00000216 48BE-                   	mov	rsi, .matrix3
   186 00000218 [0002000000000000] 
   187 00000220 48BA-                   	mov	rdx, .matrix4
   187 00000222 [8002000000000000] 
   188 0000022A 57                      	push	rdi
   189 0000022B E842020000              	call	multi4x4
   190 00000230 5F                      	pop	rdi
   191                                  
   192                                  	; compute traces
   193                                  	; compute trace 1
   194 00000231 488B3425[C8030000]      	mov	rsi, [.size]
   195 00000239 E898010000              	call	vtrace
   196 0000023E F2440F10C0              	movsd	xmm8, xmm0		; trace 1 in xmm8
   197                                  	; compute trace 2
   198 00000243 57                      	push	rdi			; save original matrix's address
   199 00000244 48BF-                   	mov	rdi, .matrix2
   199 00000246 [8001000000000000] 
   200 0000024E 488B3425[C8030000]      	mov	rsi, [.size]
   201 00000256 E87B010000              	call	vtrace
   202 0000025B F2440F10C8              	movsd	xmm9, xmm0		; trace 2 in xmm9
   203                                  	; compute trace 3
   204 00000260 48BF-                   	mov	rdi, .matrix3
   204 00000262 [0002000000000000] 
   205 0000026A 488B3425[C8030000]      	mov	rsi, [.size]
   206 00000272 E85F010000              	call	vtrace
   207 00000277 F2440F10D0              	movsd	xmm10, xmm0		; trace 3 in xmm10
   208                                  	; compute trace 4
   209 0000027C 48BF-                   	mov	rdi, .matrix4
   209 0000027E [8002000000000000] 
   210 00000286 488B3425[C8030000]      	mov	rsi, [.size]
   211 0000028E E843010000              	call	vtrace
   212 00000293 F2440F10D8              	movsd	xmm11, xmm0		; trace 4 in xmm11
   213                                  
   214                                  	; compute the coefficients
   215                                  	; compute coefficient p1
   216                                  	; p1 = -s1
   217 00000298 C539572425-             	vxorpd		xmm12, xmm8,[.minus_mask]	; p1 in xmm12
   217 0000029D [C0030000]         
   218                                  	; compute coefficient p2
   219                                  	; p2 = -1/2 * (p1 * s1 + s2)
   220 000002A1 F2450F10EC              	movsd		xmm13, xmm12			; copy p1 to xmm13
   221 000002A6 C442B9A9E9              	vfmadd213sd	xmm13, xmm8, xmm9		; xmm13 = xmm13 * xmm8 + xmm9
   222 000002AB C511572C25-             	vxorpd		xmm13, xmm13, [.minus_mask]
   222 000002B0 [C0030000]         
   223 000002B4 F2440F5E2C25-           	divsd		xmm13, [.two]			; divide by p2 in xmm13
   223 000002BA [D8030000]         
   224                                  	; copmute coefficient p3
   225                                  	; p3 = -1/3 * (p2 * s1 + p1 * s2 + s3)
   226 000002BE F2450F10F4              	movsd		xmm14, xmm12			; copy p1 to xmm14
   227 000002C3 C442B1A9F2              	vfmadd213sd	xmm14, xmm9, xmm10		; p1 * s2 + s3; xmm14 = xmm14 * xmm9 + xmm10
   228 000002C8 C44291B9F0              	vfmadd231sd	xmm14, xmm13, xmm8		; xmm14 + p2 * s1; xmm14 = xmm14 + xmm13 * xmm8
   229 000002CD C509573425-             	vxorpd		xmm14, xmm14, [.minus_mask]
   229 000002D2 [C0030000]         
   230 000002D6 F2440F5E3425-           	divsd		xmm14, [.three]			; p3 in xmm14
   230 000002DC [E0030000]         
   231                                  	; compute coefficient p4
   232                                  	; p4 = -1/4 * (p3 * s1 + p2 * s2 + p1 * s3 + s4)
   233 000002E0 F2450F10FC              	movsd		xmm15, xmm12			; copy p1 to xmm15
   234 000002E5 C442A9A9FB              	vfmadd213sd	xmm15, xmm10, xmm11		; p1 * s3 + s4; xmm15 = xmm15 * xmm10 + xmm11
   235 000002EA C44291B9F9              	vfmadd231sd	xmm15, xmm13, xmm9		; xmm15 + p2 * s1; xmm15 = xmm15 + xmm13 * xmm9
   236 000002EF C44289B9F8              	vfmadd231sd	xmm15, xmm14, xmm8		; xmm15 + p3 * s1; xmm15 = xmm15 + xmm14 * xmm8
   237 000002F4 C501573C25-             	vxorpd		xmm15, xmm15, [.minus_mask]
   237 000002F9 [C0030000]         
   238 000002FD F2440F5E3C25-           	divsd		xmm15, [.four]			; p4 in xmm15
   238 00000303 [E8030000]         
   239                                  
   240                                  	; multiply matrices with proper coefficient
   241                                  
   242 00000307 488B0C25[C8030000]      	mov		rcx, [.size]
   243 0000030F 4831C0                  	xor		rax, rax
   244                                  
   245 00000312 C4C27D19CC              	vbroadcastsd	ymm1, xmm12			; p1
   246 00000317 C4C27D19D5              	vbroadcastsd	ymm2, xmm13			; p2
   247 0000031C C4C27D19DE              	vbroadcastsd	ymm3, xmm14			; p3
   248                                  
   249 00000321 5F                      	pop		rdi				; restore original matrix's address
   250                                  
   251                                  	.loop1:
   252 00000322 C5FD280407              		vmovapd		ymm0, [rdi + rax]
   253 00000327 C5FD59C2                		vmulpd		ymm0, ymm0, ymm2
   254 0000032B C5FD2980[00010000]      		vmovapd		[.matrix1 + rax], ymm0
   255                                  
   256 00000333 C5FD2880[80010000]      		vmovapd		ymm0, [.matrix2 + rax]
   257 0000033B C5FD59C1                		vmulpd		ymm0, ymm0, ymm1
   258 0000033F C5FD2980[80010000]      		vmovapd		[.matrix2 + rax], ymm0
   259                                  
   260 00000347 C5FD2880[40030000]      		vmovapd		ymm0, [.identity + rax]
   261 0000034F C5FD59C3                		vmulpd		ymm0, ymm0, ymm3
   262 00000353 C5FD2980[00030000]      		vmovapd		[.matrixI + rax], ymm0
   263                                  
   264 0000035B 4883C020                		add		rax, 32
   265 0000035F E2C1                    		loop		.loop1
   266                                  
   267                                  	; add the four matrices and multiply by -1/p4
   268 00000361 488B0C25[C8030000]      	mov		rcx, [.size]
   269 00000369 4831C0                  	xor		rax, rax
   270                                  	; compute -1/p4
   271 0000036C F20F100425-             	movsd		xmm0, [.one]
   271 00000371 [D0030000]         
   272 00000375 C4C17B5EC7              	vdivsd		xmm0, xmm0, xmm15	; 1/p4
   273                                  	; check for 0 division
   274 0000037A 0FAE1C25[80030000]      	stmxcsr		[.mxcsr]
   275 00000382 832425[80030000]04      	and		dword[.mxcsr], 4
   276 0000038A 7543                    	jnz		.singular
   277                                  
   278                                  	; no 0 division
   279 0000038C 5E                      	pop		rsi			; recall inverse matrix's address
   280 0000038D C5F9570425-             	vxorpd		xmm0, xmm0, [.minus_mask]	; -1/p4
   280 00000392 [C0030000]         
   281 00000396 C4E27D19D0              	vbroadcastsd	ymm2, xmm0
   282                                  
   283                                  	; loop through rows
   284                                  	.loop2:
   285                                  		; add rows
   286 0000039B C5FD2880[00010000]      		vmovapd		ymm0, [.matrix1 + rax]
   287 000003A3 C5FD5880[80010000]      		vaddpd		ymm0, ymm0, [.matrix2 + rax]
   288 000003AB C5FD5880[00020000]      		vaddpd		ymm0, ymm0, [.matrix3 + rax]
   289 000003B3 C5FD5880[00030000]      		vaddpd		ymm0, ymm0, [.matrixI + rax]
   290 000003BB C5FD59C2                		vmulpd		ymm0, ymm0, ymm2		; multiply the row by -1/p4
   291 000003BF C5FD290406              		vmovapd		[rsi + rax], ymm0
   292 000003C4 4883C020                		add		rax, 32
   293 000003C8 E2D1                    		loop		.loop2
   294                                  
   295 000003CA 4831C0                  		xor	rax, rax	; return 0, no error
   296                                  
   297 000003CD C9                      	leave
   298 000003CE C3                      	ret
   299                                  
   300                                  	.singular:
   301 000003CF B801000000              		mov	rax, 1		; return 1, singular matrix
   302                                  	
   303 000003D4 C9                      	leave
   304 000003D5 C3                      	ret
   305                                  
   306                                  ;-------------------------------------------------------------------------------------------------------------
   307                                  ; trace computation
   308                                  vtrace:
   309 000003D6 55                      	push	rbp
   310 000003D7 4889E5                  	mov	rbp, rsp
   311                                  
   312                                  	; build matrix in memory
   313 000003DA C5FD2807                	vmovapd		ymm0, [rdi]
   314 000003DE C5FD284F20              	vmovapd		ymm1, [rdi + 32]
   315 000003E3 C5FD285740              	vmovapd		ymm2, [rdi + 64]
   316 000003E8 C5FD285F60              	vmovapd		ymm3, [rdi + 96]
   317 000003ED C4E37D0DC102            	vblendpd	ymm0, ymm0, ymm1, 0010b
   318 000003F3 C4E37D0DC204            	vblendpd	ymm0, ymm0, ymm2, 0100b
   319 000003F9 C4E37D0DC308            	vblendpd	ymm0, ymm0, ymm3, 1000b
   320 000003FF C5FD7CC0                	vhaddpd		ymm0, ymm0, ymm0
   321 00000403 C4E3FD01C027            	vpermpd		ymm0, ymm0, 00100111b
   322 00000409 660F7CC0                	haddpd		xmm0, xmm0
   323                                  
   324 0000040D C9                      	leave
   325 0000040E C3                      	ret
   326                                  
   327                                  ;-------------------------------------------------------------------------------------------------------------
   328                                  printm4x4:
   329                                  section .data
   330 000003F0 256609256609256609-     	.fmt	db	"%f",9,"%f",9,"%f",9,"%f",10,0
   330 000003F9 25660A00           
   331                                  section .text
   332 0000040F 55                      	push	rbp
   333 00000410 4889E5                  	mov	rbp, rsp
   334                                  
   335 00000413 53                      	push	rbx			; callee saved
   336 00000414 4157                    	push	r15			; callee saved
   337                                  
   338 00000416 48BF-                   	mov	rdi, .fmt
   338 00000418 [F003000000000000] 
   339 00000420 B904000000              	mov	rcx, 4
   340 00000425 4831DB                  	xor	rbx, rbx		; row counter
   341                                  
   342                                  	.loop:
   343 00000428 F20F10041E              		movsd	xmm0, [rsi + rbx]
   344 0000042D F20F104C1E08            		movsd	xmm1, [rsi + rbx + 8]
   345 00000433 F20F10541E10            		movsd	xmm2, [rsi + rbx + 16]
   346 00000439 F20F105C1E18            		movsd	xmm3, [rsi + rbx + 24]
   347 0000043F B804000000              		mov	rax, 4			; 4 floats
   348 00000444 51                      		push	rcx			; caller saved
   349 00000445 56                      		push	rsi			; caller saved
   350 00000446 57                      		push	rdi			; caller saved
   351                                  		; align stack (if needed)
   352 00000447 4D31FF                  		xor	r15, r15
   353 0000044A 48F7C40F000000          		test	rsp, 0xf		; last byte is 8 (not aligned)?
   354 00000451 410F95C7                		setnz	r15b			; set if not aligned
   355 00000455 49C1E703                		shl	r15, 3			; multipl by 8
   356 00000459 4C29FC                  		sub	rsp, r15		; subtract 0 or 8
   357 0000045C E8(00000000)            		call	printf
   358 00000461 4C01FC                  		add	rsp, r15		; add 0 or 8 to restore rsp
   359                                  
   360 00000464 5F                      		pop	rdi
   361 00000465 5E                      		pop	rsi
   362 00000466 59                      		pop	rcx
   363 00000467 4883C320                		add	rbx, 32			; next row
   364 0000046B E2BB                    		loop	.loop
   365                                  
   366 0000046D 415F                    	pop	r15
   367 0000046F 5B                      	pop	rbx
   368                                  
   369 00000470 C9                      	leave
   370 00000471 C3                      	ret
   371                                  
   372                                  ;--------------------------------------------------------------------------------------------------------
   373                                  multi4x4:
   374 00000472 55                      	push	rbp
   375 00000473 4889E5                  	mov	rbp, rsp
   376                                  
   377 00000476 4831C0                  	xor	rax, rax
   378 00000479 B904000000              	mov	rcx, 4
   379 0000047E C5FC77                  	vzeroall		; zero all ymm registers
   380                                  
   381                                  	.loop:
   382 00000481 C5FD2806                		vmovapd		ymm0, [rsi]
   383                                  
   384 00000485 C4E27D190C07            		vbroadcastsd	ymm1, [rdi + rax]
   385 0000048B C462F5B8E0              		vfmadd231pd	ymm12, ymm1, ymm0
   386                                  
   387 00000490 C4E27D194C0720          		vbroadcastsd	ymm1, [rdi + 32 + rax]
   388 00000497 C462F5B8E8              		vfmadd231pd	ymm13, ymm1, ymm0
   389                                  
   390 0000049C C4E27D194C0740          		vbroadcastsd	ymm1, [rdi + 64 + rax]
   391 000004A3 C462F5B8F0              		vfmadd231pd	ymm14, ymm1, ymm0
   392                                  
   393 000004A8 C4E27D194C0760          		vbroadcastsd	ymm1, [rdi + 96 + rax]
   394 000004AF C462F5B8F8              		vfmadd231pd	ymm15, ymm1, ymm0
   395                                  
   396 000004B4 4883C008                		add		rax, 8			; one element has 64 bits
   397 000004B8 4883C620                		add		rsi, 32			; every row has 256 bits
   398                                  
   399 000004BC E2C3                    		loop		.loop
   400                                  
   401                                  	; move result to memory, row per row
   402 000004BE C57D2922                	vmovapd		[rdx], ymm12
   403 000004C2 C57D296A20              	vmovapd		[rdx + 32], ymm13
   404 000004C7 C57D297240              	vmovapd		[rdx + 64], ymm14
   405 000004CC C57D297A60              	vmovapd		[rdx + 96], ymm15
   406 000004D1 4831C0                  	xor		rax, rax		; return value
   407                                  
   408 000004D4 C9                      	leave
   409 000004D5 C3                      	ret
