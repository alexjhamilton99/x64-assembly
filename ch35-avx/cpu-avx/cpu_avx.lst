     1                                  ; cpu_avx.asm
     2                                  extern printf
     3                                  section .data
     4 00000000 546869732063707520-     	fmt_noavx	db	"This cpu doesn't support AVX.",10,0
     4 00000009 646F65736E27742073-
     4 00000012 7570706F7274204156-
     4 0000001B 582E0A00           
     5 0000001F 546869732063707520-     	fmt_avx		db	"This cpu supports AVX.",10,0
     5 00000028 737570706F72747320-
     5 00000031 4156582E0A00       
     6 00000037 546869732063707520-     	fmt_noavx2	db	"This cpu doesn't support AVX2.",10,0
     6 00000040 646F65736E27742073-
     6 00000049 7570706F7274204156-
     6 00000052 58322E0A00         
     7 00000057 546869732063707520-     	fmt_avx2	db	"This cpu supports AVX2.",10,0
     7 00000060 737570706F72747320-
     7 00000069 415658322E0A00     
     8 00000070 546869732063707520-     	fmt_noavx512	db	"This cpu doesn't support AVX-512.",10,0
     8 00000079 646F65736E27742073-
     8 00000082 7570706F7274204156-
     8 0000008B 582D3531322E0A00   
     9 00000093 546869732063707520-     	fmt_avx512	db	"This cpu supports AVX-512.",10,0
     9 0000009C 737570706F72747320-
     9 000000A5 4156582D3531322E0A-
     9 000000AE 00                 
    10                                  section .bss
    11                                  section .text
    12                                  	global main
    13                                  main:
    14 00000000 55                      	push	rbp
    15 00000001 4889E5                  	mov	rbp, rsp
    16                                  	
    17 00000004 E802000000              	call	cpu_sse		; returns 1 in rax if AVX supported, otherwise 0
    18                                  
    19 00000009 C9                      	leave
    20 0000000A C3                      	ret
    21                                  
    22                                  cpu_sse:
    23 0000000B 55                      	push	rbp
    24 0000000C 4889E5                  	mov	rbp, rsp
    25                                  
    26                                  	; test for AVX
    27 0000000F B801000000              	mov	eax, 1		; request CPU feature flags
    28 00000014 0FA2                    	cpuid
    29 00000016 B81C000000              	mov	eax, 28		; test bit 28 in eax
    30 0000001B 0FA3C1                  	bt	ecx, eax	; bt = bit test
    31 0000001E 7368                    	jnc	no_avx
    32 00000020 4831C0                  	xor	rax, rax
    33 00000023 48BF-                   	mov	rdi, fmt_avx
    33 00000025 [1F00000000000000] 
    34 0000002D E8(00000000)            	call	printf
    35                                  	; test for AVX 2
    36 00000032 B807000000              	mov	eax, 7		; request CPU feature flags
    37 00000037 B900000000              	mov	ecx, 0
    38 0000003C 0FA2                    	cpuid
    39 0000003E B805000000              	mov	eax, 5		; test bit 5 in ebx
    40 00000043 0FA3C3                  	bt	ebx, eax
    41 00000046 0F8381000000            	jnc	the_exit
    42 0000004C 4831C0                  	xor	rax, rax
    43 0000004F 48BF-                   	mov	rdi, fmt_avx2
    43 00000051 [5700000000000000] 
    44 00000059 E8(00000000)            	call	printf
    45                                  	; test for AVX-512 foundation
    46 0000005E B807000000              	mov	eax, 7		; request CPU feature flags
    47 00000063 B900000000              	mov	ecx, 0
    48 00000068 0FA2                    	cpuid
    49 0000006A B810000000              	mov	eax, 16		; test bit 16 in ebx
    50 0000006F 0FA3C3                  	bt	ebx, eax
    51 00000072 7342                    	jnc	no_avx512
    52 00000074 4831C0                  	xor	rax, rax
    53 00000077 48BF-                   	mov	rdi, fmt_avx512
    53 00000079 [9300000000000000] 
    54 00000081 E8(00000000)            	call	printf
    55 00000086 EB45                    	jmp	the_exit
    56                                  
    57                                  	no_avx:
    58 00000088 48BF-                   		mov	rdi, fmt_noavx
    58 0000008A [0000000000000000] 
    59 00000092 4831C0                  		xor	rax, rax
    60 00000095 E8(00000000)            		call	printf			; displays message if AVX not available
    61 0000009A 4831C0                  		xor	rax, rax		; returns 0, no AVX
    62 0000009D EB2E                    		jmp	the_exit
    63                                  
    64                                  	no_avx2:
    65 0000009F 48BF-                   		mov	rdi, fmt_noavx2
    65 000000A1 [3700000000000000] 
    66 000000A9 4831C0                  		xor	rax, rax
    67 000000AC E8(00000000)            		call	printf			; displays message if AVX not available
    68 000000B1 4831C0                  		xor	rax, rax		; returns 0, no AVX
    69 000000B4 EB17                    		jmp	the_exit
    70                                  
    71                                  	no_avx512:
    72 000000B6 48BF-                   		mov	rdi, fmt_noavx512
    72 000000B8 [7000000000000000] 
    73 000000C0 4831C0                  		xor	rax, rax
    74 000000C3 E8(00000000)            		call	printf			; displays message if AVX not available
    75 000000C8 4831C0                  		xor	rax, rax		; returns 0, no AVX
    76 000000CB EB00                    		jmp	the_exit
    77                                  
    78                                  	the_exit:
    79 000000CD C9                      		leave
    80 000000CE C3                      		ret
