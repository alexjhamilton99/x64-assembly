     1                                  ; shuffle.asm
     2                                  extern printf
     3                                  
     4                                  section .data
     5 00000000 546865736520617265-     	fmt0	db	"These are the number in memory: ",10,0
     5 00000009 20746865206E756D62-
     5 00000012 657220696E206D656D-
     5 0000001B 6F72793A200A00     
     6 00000022 54687320697320786D-     	fmt00	db	"Ths is xmm0: ",10,0
     6 0000002B 6D303A200A00       
     7 00000031 25642000                	fmt1	db	"%d ",0
     8 00000035 53687566666C652D62-     	fmt2	db	"Shuffle-broadcast double word %i",10,0
     8 0000003E 726F61646361737420-
     8 00000047 646F75626C6520776F-
     8 00000050 72642025690A00     
     9 00000057 256420256420256420-     	fmt3	db	"%d %d %d %d",10,0
     9 00000060 25640A00           
    10 00000064 53687566666C652D72-     	fmt4	db	"Shuffle-reverse double words:",10,0
    10 0000006D 65766572736520646F-
    10 00000076 75626C6520776F7264-
    10 0000007F 733A0A00           
    11 00000083 53687566666C652D72-     	fmt5	db	"Shuffle-reverse packed bytes in xmm0:",10,0
    11 0000008C 657665727365207061-
    11 00000095 636B65642062797465-
    11 0000009E 7320696E20786D6D30-
    11 000000A7 3A0A00             
    12 000000AA 53687566666C652D72-     	fmt6	db	"Shuffle-rotate left:",10,0
    12 000000B3 6F74617465206C6566-
    12 000000BC 743A0A00           
    13 000000C0 53687566666C652D72-     	fmt7	db	"Shuffle-rotate right:",10,0
    13 000000C9 6F7461746520726967-
    13 000000D2 68743A0A00         
    14 000000D7 256325632563256325-     	fmt8	db	"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",10,0
    14 000000E0 632563256325632563-
    14 000000E9 256325632563256325-
    14 000000F2 63256325630A00     
    15 000000F9 5061636B6564206279-     	fmt9	db	"Packed bytes in xmm0:",10,0
    15 00000102 74657320696E20786D-
    15 0000010B 6D303A0A00         
    16 00000110 0A00                    	NL	db	10,0
    17                                  
    18 00000112 01000000                	number1	dd	1
    19 00000116 02000000                	number2	dd	2
    20 0000011A 03000000                	number3	dd	3
    21 0000011E 04000000                	number4	dd	4
    22                                  
    23 00000122 616263646566676869-     	char	db	"abcdefghijklmnop"
    23 0000012B 6A6B6C6D6E6F70     
    24                                  	
    25 00000132 0F0E0D0C0B0A090807-     	bytereverse	db	15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
    25 0000013B 06050403020100     
    26                                  
    27                                  section .bss
    28                                  section .text
    29                                  	global main
    30                                  main:
    31 00000000 55                      	push	rbp
    32 00000001 4889E5                  	mov	rbp, rsp
    33                                  
    34 00000004 4883EC20                	sub	rsp, 32		; stackspace for original xmm0 and modified xmm0
    35                                  
    36                                  	; SHUFFLING DOUBLE WORDS
    37                                  	; print numbers in reverse
    38 00000008 48BF-                   	mov	rdi, fmt0
    38 0000000A [0000000000000000] 
    39 00000012 E8(00000000)            	call	printf
    40 00000017 48BF-                   	mov	rdi, fmt1
    40 00000019 [3100000000000000] 
    41 00000021 488B3425[1E010000]      	mov	rsi, [number4]
    42 00000029 4831C0                  	xor	rax, rax
    43 0000002C E8(00000000)            	call	printf
    44 00000031 48BF-                   	mov	rdi, fmt1
    44 00000033 [3100000000000000] 
    45 0000003B 488B3425[1A010000]      	mov	rsi, [number3]
    46 00000043 4831C0                  	xor	rax, rax
    47 00000046 E8(00000000)            	call	printf
    48 0000004B 48BF-                   	mov	rdi, fmt1
    48 0000004D [3100000000000000] 
    49 00000055 488B3425[16010000]      	mov	rsi, [number2]
    50 0000005D 4831C0                  	xor	rax, rax
    51 00000060 E8(00000000)            	call	printf
    52 00000065 48BF-                   	mov	rdi, fmt1
    52 00000067 [3100000000000000] 
    53 0000006F 488B3425[12010000]      	mov	rsi, [number1]
    54 00000077 4831C0                  	xor	rax, rax
    55 0000007A E8(00000000)            	call	printf
    56 0000007F 48BF-                   	mov	rdi, NL
    56 00000081 [1001000000000000] 
    57 00000089 E8(00000000)            	call	printf
    58                                  
    59                                  	; build xmm0 with the numbers
    60 0000008E 660FEFC0                	pxor	xmm0, xmm0
    61 00000092 660F3A220425-           	pinsrd	xmm0, dword[number1],0
    61 00000098 [12010000]00       
    62 0000009D 660F3A220425-           	pinsrd	xmm0, dword[number2],1
    62 000000A3 [16010000]01       
    63 000000A8 660F3A220425-           	pinsrd	xmm0, dword[number3],2
    63 000000AE [1A010000]02       
    64 000000B3 660F3A220425-           	pinsrd	xmm0, dword[number4],3
    64 000000B9 [1E010000]03       
    65 000000BE F30F7F45F0              	movdqu	[rbp - 16], xmm0	; save xmm0 for later use
    66 000000C3 48BF-                   	mov	rdi, fmt00
    66 000000C5 [2200000000000000] 
    67 000000CD E8(00000000)            	call	printf			; print title
    68 000000D2 F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0 after printf
    69 000000D7 E886010000              	call	print_xmm0d		; print xmm0
    70 000000DC F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0 after printf
    71                                  
    72                                  	; SHUFFLE-BROADCAST
    73                                  	; shuffle: broadcast least significant dword (index 0)
    74 000000E1 F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
    75 000000E6 660F70C000              	pshufd	xmm0, xmm0, 00000000b	; shuffle
    76 000000EB 48BF-                   	mov	rdi, fmt2
    76 000000ED [3500000000000000] 
    77 000000F5 BE00000000              	mov	rsi, 0			; print title
    78 000000FA F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
    79 000000FF E8(00000000)            	call	printf
    80 00000104 F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
    81 00000109 E854010000              	call	print_xmm0d		; print xmm0's content
    82                                  
    83                                  	; shuffle: broadcast dword index 1
    84 0000010E F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
    85 00000113 660F70C055              	pshufd	xmm0, xmm0, 01010101b	; shuffle
    86 00000118 48BF-                   	mov	rdi, fmt2
    86 0000011A [3500000000000000] 
    87 00000122 BE01000000              	mov	rsi, 1			; print title
    88 00000127 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
    89 0000012C E8(00000000)            	call	printf
    90 00000131 F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
    91 00000136 E827010000              	call	print_xmm0d		; print xmm0's content
    92                                  
    93                                  	; shuffle: broadcast dword index 2
    94 0000013B F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
    95 00000140 660F70C0AA              	pshufd	xmm0, xmm0, 10101010b	; shuffle
    96 00000145 48BF-                   	mov	rdi, fmt2
    96 00000147 [3500000000000000] 
    97 0000014F BE02000000              	mov	rsi, 2			; print title
    98 00000154 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
    99 00000159 E8(00000000)            	call	printf
   100 0000015E F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   101 00000163 E8FA000000              	call	print_xmm0d		; print xmm0's content
   102                                  
   103                                  	; shuffle: broadcast dword index 3
   104 00000168 F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
   105 0000016D 660F70C0FF              	pshufd	xmm0, xmm0, 11111111b	; shuffle
   106 00000172 48BF-                   	mov	rdi, fmt2
   106 00000174 [3500000000000000] 
   107 0000017C BE03000000              	mov	rsi, 3			; print title
   108 00000181 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
   109 00000186 E8(00000000)            	call	printf
   110 0000018B F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   111 00000190 E8CD000000              	call	print_xmm0d		; print xmm0's content
   112                                  
   113                                  	; SHUFFLE-REVERSE
   114                                  	; reverse double words
   115 00000195 F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
   116 0000019A 660F70C01B              	pshufd	xmm0, xmm0, 00011011b	; shuffle
   117 0000019F 48BF-                   	mov	rdi, fmt4		; print title
   117 000001A1 [6400000000000000] 
   118 000001A9 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
   119 000001AE E8(00000000)            	call	printf
   120 000001B3 F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   121 000001B8 E8A5000000              	call	print_xmm0d		; print xmm0's content
   122                                  
   123                                  	; SHUFFLE-ROTATE
   124                                  	; rotate left
   125 000001BD F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
   126 000001C2 660F70C093              	pshufd	xmm0, xmm0, 10010011b	; shuffle
   127 000001C7 48BF-                   	mov	rdi, fmt6		; print title
   127 000001C9 [AA00000000000000] 
   128 000001D1 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
   129 000001D6 E8(00000000)            	call	printf
   130 000001DB F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   131 000001E0 E87D000000              	call	print_xmm0d		; print xmm0's content
   132                                  
   133                                  	; rotate right
   134 000001E5 F30F6F45F0              	movdqu	xmm0, [rbp - 16]	; restore xmm0
   135 000001EA 660F70C039              	pshufd	xmm0, xmm0, 00111001b	; shuffle
   136 000001EF 48BF-                   	mov	rdi, fmt7		; print title
   136 000001F1 [C000000000000000] 
   137 000001F9 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
   138 000001FE E8(00000000)            	call	printf
   139 00000203 F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   140 00000208 E855000000              	call	print_xmm0d		; print xmm0's content
   141                                  
   142                                  	; SHUFFLING BYTES
   143 0000020D 48BF-                   	mov	rdi, fmt9
   143 0000020F [F900000000000000] 
   144 00000217 E8(00000000)            	call	printf			; print title
   145 0000021C F30F6F0425-             	movdqu	xmm0, [char]
   145 00000221 [22010000]         
   146 00000225 F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
   147 0000022A E864000000              	call	print_xmm0b		; print bytes in xmm0
   148 0000022F F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   149 00000234 F30F6F0C25-             	movdqu	xmm1, [bytereverse]	; load mask
   149 00000239 [32010000]         
   150 0000023D 660F3800C1              	pshufb	xmm0, xmm1		; shuffle bytes
   151 00000242 48BF-                   	mov	rdi, fmt5		; print title
   151 00000244 [8300000000000000] 
   152 0000024C F30F7F45E0              	movdqu	[rbp - 32], xmm0	; printf destroys xmm0
   153 00000251 E8(00000000)            	call	printf
   154 00000256 F30F6F45E0              	movdqu	xmm0, [rbp - 32]	; restore xmm0 after printf
   155 0000025B E833000000              	call	print_xmm0b		; print xmm0's content
   156                                  
   157 00000260 C9                      	leave
   158 00000261 C3                      	ret
   159                                  
   160                                  ; print double words function
   161                                  print_xmm0d:
   162 00000262 55                      	push	rbp
   163 00000263 4889E5                  	mov	rbp, rsp
   164                                  
   165 00000266 48BF-                   	mov	rdi, fmt3
   165 00000268 [5700000000000000] 
   166 00000270 4831C0                  	xor	rax, rax
   167 00000273 660F3A16C603            	pextrd	esi, xmm0, 3		; extract double words
   168 00000279 660F3A16C202            	pextrd	edx, xmm0, 2		; in reverse, little endian
   169 0000027F 660F3A16C101            	pextrd	ecx, xmm0, 1
   170 00000285 66410F3A16C000          	pextrd	r8d, xmm0, 0
   171 0000028C E8(00000000)            	call	printf
   172                                  
   173 00000291 C9                      	leave
   174 00000292 C3                      	ret
   175                                  
   176                                  ; print bytes function
   177                                  print_xmm0b:
   178 00000293 55                      	push	rbp
   179 00000294 4889E5                  	mov	rbp, rsp
   180                                  
   181 00000297 48BF-                   	mov	rdi, fmt8
   181 00000299 [D700000000000000] 
   182 000002A1 4831C0                  	xor	rax, rax
   183 000002A4 660F3A14C600            	pextrb	esi, xmm0, 0		; in reverse, little endian
   184 000002AA 660F3A14C201            	pextrb	edx, xmm0, 1		; first use registers, then use stack
   185 000002B0 660F3A14C102            	pextrb	ecx, xmm0, 2
   186 000002B6 66410F3A14C003          	pextrb	r8d, xmm0, 3
   187 000002BD 66410F3A14C104          	pextrb	r9d, xmm0, 4
   188 000002C4 660F3A14C00F            	pextrb	eax, xmm0, 15
   189 000002CA 50                      	push	rax
   190 000002CB 660F3A14C00E            	pextrb	eax, xmm0, 14
   191 000002D1 50                      	push	rax
   192 000002D2 660F3A14C00D            	pextrb	eax, xmm0, 13
   193 000002D8 50                      	push	rax
   194 000002D9 660F3A14C00C            	pextrb	eax, xmm0, 12
   195 000002DF 50                      	push	rax
   196 000002E0 660F3A14C00B            	pextrb	eax, xmm0, 11
   197 000002E6 50                      	push	rax
   198 000002E7 660F3A14C00A            	pextrb	eax, xmm0, 10
   199 000002ED 50                      	push	rax
   200 000002EE 660F3A14C009            	pextrb	eax, xmm0, 9
   201 000002F4 50                      	push	rax
   202 000002F5 660F3A14C008            	pextrb	eax, xmm0, 8
   203 000002FB 50                      	push	rax
   204 000002FC 660F3A14C007            	pextrb	eax, xmm0, 7
   205 00000302 50                      	push	rax
   206 00000303 660F3A14C006            	pextrb	eax, xmm0, 6
   207 00000309 50                      	push	rax
   208 0000030A 660F3A14C005            	pextrb	eax, xmm0, 5
   209 00000310 50                      	push	rax
   210                                  
   211 00000311 4831C0                  	xor	rax, rax
   212 00000314 E8(00000000)            	call	printf
   213                                  
   214 00000319 C9                      	leave
   215 0000031A C3                      	ret
